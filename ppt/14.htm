<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>CSS选择符 - By whqet</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.colors.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>CSS选择符</h1>
<h2>演讲者：whqet</h2>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>内容提纲</h2>
<ol class="rollIn">
<li>选择符概要</li>
<li>元素选择符</li>
<li>关系选择符</li>
<li>属性选择符</li>
<li>伪类选择符</li>
<li>伪对象选择符</li>
</ol>

</article></section></slide>
<slide class="slide" style="background:#25A1E1 url(/img/13/css3.jpg) left center no-repeat; background-size:100%" ><section class="slide-wrapper"><article class="flexbox vleft">

<h2>选择符</h2>
<h3>选择符类似于条件判断</h3>
<h3>决定哪些元素得以匹配，应用CSS规则</h3>
<pre><code class="css">选择符{
    CSS规则;
}
</code></pre>

</article></section></slide>
<slide class="slide" style="background:#25A1E1 url(/img/13/css3.jpg) left center no-repeat; background-size:100%" ><section class="slide-wrapper"><article class="flexbox vleft">

<h2>选择符标准</h2>
<p><a href="///www.w3.org/TR/selectors/" target="_blank">Selectors Level 3</a>标准
-
<a href="///www.w3.org/TR/selectors4/" target="_blank">Selectors Level 4</a>工作草案</p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>选择符列表</h2>
<iframe src="./demos/selectors.html" width="100%" frameborder="0"></iframe>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>元素选择符</h2>
<table class="thin">
    <thead>
        <tr>
            <th>选择符</th>
            <th>名称</th>
            <th>描述</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>*</td>
            <td>通配选择符(Universal Selector)</td>
            <td>任意元素</td>
        </tr>
        <tr>
            <td>E</td>
            <td>类型选择符(Type Selector)</td>
            <td>E类型的元素</td>
        </tr>
        <tr>
            <td>E#myid</td>
            <td>id选择符(ID Selector)</td>
            <td>id值为&quot;myid&quot;的E元素</td>
        </tr>
        <tr>
            <td>E.myclass</td>
            <td>class选择符(Class Selector)</td>
            <td>class值为&quot;myclass&quot;的E元素</td>
        </tr>
    </tbody>
</table>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>元素选择符</h2>
<h3>通配符选择符——匹配任意元素</h3>
<pre><code class="css">/*
  简单粗暴的选择符
  简单CSS重置，书写简单，功能强大，但执行效率太低，建议使用CSS Reset或normalize.css
*/
*{
    padding:0;
    margin: 0;
}
/*非常流行的用法，改变盒模型组成模式*/
*,
*:before,
*:after {
  box-sizing: border-box;
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>元素选择符</h2>
<h3>类型选择符——以html标签类型作选择符</h3>
<pre><code class="css">/*
  以html标签类型作选择符，范围内所有的该类型元素都会被选中
  案例中选中所有的h1元素
*/
h1{
    font-size: 48px;
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>元素选择符</h2>
<h3>id选择符——以元素的id属性作为选择符</h3>
<h3>id为唯一标识符，正常情况下只选中一个元素</h3>
<pre><code class="css">/*
  以元素的id属性作为选择符
  一般用在页面布局上 
*/
#wrapper{
    width:1000px;
    margin: auto;
}
p#content{
    text-indent: 2em;
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>元素选择符</h2>
<h3>class选择符——以元素的class属性作为选择符</h3>
<pre><code class="css">/*
    可以给一个元素设置多个类，以空格分开
    &lt;p class=&quot;content note&quot;&gt;多类选择符的使用&lt;/p&gt;
*/
/*选中class的content的元素*/
.content{
    text-align: left;
}
/*选中class的content的p类型元素*/
p.note{
    font-size: 24px;
}
/*选中同时具有content和note两个类的元素*/
.content.note{
    text-decoration: underline;
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>关系选择符</h2>
<table class="thin">
    <thead>
        <tr>
            <th>选择符</th>
            <th>名称</th>
            <th>描述</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>E F</td>
            <td>后代选择符</td>
            <td>E元素的后代F元素</td>
        </tr>
        <tr>
            <td>E&gt;F</td>
            <td>子代选择符</td>
            <td>E元素的子代元素F</td>
        </tr>
        <tr>
            <td>E+F</td>
            <td>相邻选择符</td>
            <td>跟E后面相邻的F元素</td>
        </tr>
        <tr>
            <td>E~F</td>
            <td>兄弟选择符</td>
            <td>E元素的后面兄弟F元素</td>
        </tr>
    </tbody>
</table>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>关系选择符</h2>
<h3>后代选择符——选择所有层级的后代</h3>
<pre><code class="css">/*
    选择所有层次的后代
*/
header nav{
    color:rgba(0,100,20,.3);
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>关系选择符</h2>
<h3>子代选择符——选择儿子层级的后代</h3>
<pre><code class="css">/*
    选择儿子层级的后代
*/
header&gt;nav{
    color:rgba(0,100,20,.3);
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>关系选择符</h2>
<h3>子代选择符与后代选择符的不同</h3>
<iframe src="./demos/editor.html?file=selector_ef" style="height:400px;"></iframe>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>关系选择符</h2>
<h3>相邻选择符——跟E后面相邻的F元素(E+F)</h3>
<pre><code class="css">/*
    跟E后面相邻的F元素
*/
h2+p{
    text-indent: 2em;
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>关系选择符</h2>
<h3>兄弟选择符——E元素的后面兄弟F元素(E~F)</h3>
<pre><code class="css">/*
    E元素的后面兄弟F元素
*/
h2~p{
    text-indent: 2em;
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>关系选择符</h2>
<h3>相邻选择符与兄弟选择符的不同</h3>
<iframe src="./demos/editor.html?file=selector_sibling" style="height:400px;"></iframe>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>属性选择符</h2>
<table class="thin">
    <thead>
        <tr>
            <th>选择符</th>
            <th>描述</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>E[foo]</td>
            <td>具有&quot;foo&quot;属性的E类型元素</td>
        </tr>
        <tr>
            <td>E[foo=&quot;bar&quot;]</td>
            <td>具有&quot;foo&quot;属性且值为&quot;bar&quot;的E类型元素</td>
        </tr>
        <tr>
            <td>E[foo~=&quot;bar&quot;]</td>
            <td>具有&quot;foo&quot;属性且值为用空格分隔的列表，其中一个为&quot;bar&quot;的E元素(包含只有一个值且该值等于val的情况)</td>
        </tr>
        <tr>
            <td>E[foo^=&quot;bar&quot;]</td>
            <td>具有&quot;foo&quot;属性且值以&quot;bar&quot;开头的E元素</td>
        </tr>
        <tr>
            <td>E[foo$=&quot;bar&quot;]</td>
            <td>具有&quot;foo&quot;属性且值以&quot;bar&quot;结尾的E元素</td>
        </tr>
        <tr>
            <td>E[foo*=&quot;bar&quot;]</td>
            <td>具有&quot;foo&quot;属性且值包含&quot;bar&quot;字符串的E元素</td>
        </tr>
        <tr>
            <td>E[foo|=&quot;en&quot;]</td>
            <td>具有&quot;foo&quot;属性且值为以&quot;en&quot;开头并用&quot;-&quot;分隔的字符串的E元素，包含值仅为&quot;en&quot;的E元素</td>
        </tr>
    </tbody>
</table>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>属性选择符</h2>
<h3>应用案例</h3>
<iframe src="./demos/editor.html?file=selector_icon" style="height:400px;"></iframe>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>伪类选择符</h2>
<h3>结构性伪类</h3>
<table class="thin">
        <thead>
            <tr>
                <th class="pattern">模式
                </th>
                <th>意义
                </th>
                <th>定义
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="pattern">E:root
                </td>
                <td>作为文档根元素的E元素
                </td>
                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:nth-child(n)
                </td>
                <td>作为第n个子元素的E元素
                </td>
                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:nth-last-child(n)
                </td>
                <td>作为倒数第n个子元素的E元素
                </td>
                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:nth-of-type(n)
                </td>
                <td>第n个同类型的E元素
                </td>
                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:nth-last-of-type(n)
                </td>
                <td>倒数第n个同类型的E元素
                </td>
                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:first-child
                </td>
                <td>作为第一个子元素的E元素
                </td>
                <td>2
                </td>
            </tr>
            <tr>
                <td class="pattern">E:last-child
                </td>
                <td>作为第一个子元素的E元素
                </td>
                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:first-of-type
                </td>
                <td>作为同类型中一个元素的E元素
                </td>
                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:last-of-type
                </td>
                <td>作为同类型中最后一个元素的E元素
                </td>
                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:only-child
                </td>
                <td>作为“独生”子元素的E元素
                </td>

                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:only-of-type
                </td>
                <td>作为唯一同类型元素的E元素
                </td>

                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:empty
                </td>
                <td>没有子元素的E元素
                </td>

                <td>3
                </td>
            </tr>
        </tbody>
</table>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>伪类选择符</h2>
<h3><a href="./demos/selector_pseudo.html" target="_blank">结构性伪类应用案例</a></h3>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>伪类选择符</h2>
<h3>其他伪类</h3>
<table class="thin">
        <thead>
            <tr>
                <th class="pattern">模式
                </th>
                <th>意义
                </th>
                <th>分类
                </th>
                <th>定义
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="pattern">E:link
                    <br>E:visited
                </td>
                <td>未访问过和访问过的E元素
                </td>
                <td>链接伪类
                </td>
                <td>1
                </td>
            </tr>
            <tr>
                <td class="pattern">E:active
                    <br>E:hover
                    <br>E:focus
                </td>
                <td>E元素的指定交互状态
                </td>
                <td>用户交互伪类
                </td>
                <td>1、2
                </td>
            </tr>
            <tr>
                <td class="pattern">E:target
                </td>
                <td>相关URL指向的E元素
                </td>
                <td>目标伪类
                </td>
                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:lang(fr)
                </td>
                <td>使用特殊语言(fr)的E元素
                </td>
                <td>语言伪类
                </td>
                <td>2
                </td>
            </tr>
            <tr>
                <td class="pattern">E:enabled
                    <br>E:disabled
                </td>
                <td>处于启用或禁用状态的UI元素
                </td>
                <td>UI状态伪类
                </td>
                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:checked
                </td>
                <td>处于checked状态的UI元素
                </td>
                <td>UI状态伪类
                </td>
                <td>3
                </td>
            </tr>
            <tr>
                <td class="pattern">E:not(s)
                </td>
                <td>不匹配&quot;s&quot;选择符的E元素
                </td>
                <td>非伪类选择符
                </td>
                <td>3
                </td>
            </tr>
        </tbody>
</table>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>伪类选择符</h2>
<h3>结构性伪类应用案例</h3>
<iframe src="./demos/editor.html?file=selector_pseudeoclass" style="height:400px;"></iframe>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>伪类选择符</h2>
<h3><a href="./demos/selector_target.html" target="_blank">目标伪类应用案例</a></h3>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>伪对象选择符</h2>
<table class="thin">
    <thead>
        <tr>
            <th class="pattern">模式
            </th>
            <th>意义
            </th>
            <th>分类
            </th>
            <th>定义
            </th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td class="pattern">E::first-line
            </td>
            <td>E对象的第一行样式
            </td>
            <td><a href="#first-line">伪对象选择符</a>
            </td>
            <td>1
            </td>
        </tr>
        <tr>
            <td class="pattern">E::first-letter
            </td>
            <td>E对象的第一个字符样式
            </td>
            <td><a href="#first-letter">伪对象选择符</a>
            </td>
            <td>1
            </td>
        </tr>
        <tr>
            <td class="pattern">E::before
            </td>
            <td>E元素的生成对象before
            </td>
            <td><a href="#gen-content">伪对象选择符</a>
            </td>
            <td>2
            </td>
        </tr>
        <tr>
            <td class="pattern">E::after
            </td>
            <td>E元素的生成对象after
            </td>
            <td><a href="#gen-content">伪对象选择符</a>
            </td>
            <td>2
            </td>
        </tr>
    </tbody>
</table>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>伪对象选择符</h2>
<h3>::first-line和::first-letter</h3>
<iframe src="./demos/editor.html?file=selector_pseudeoelement" style="height:400px;"></iframe>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>伪对象选择符</h2>
<h3>::before和::after</h3>
<iframe src="./demos/editor.html?file=selector_beforeAndAfter" style="height:400px;"></iframe>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>伪对象选择符</h2>
<h3><a href="./demos/editor.html?file=tooltip" target="_blank">纯CSS实现的工具提示</a></h3>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>前端开发</h1>
<h2>旨为前端开发工程师的前端开发基础课程</h2>
<p><small style="vertical-align:middle;display:inline-block"><iframe src="///ghbtns.com/github-btn.html?user=zptcsoft&repo=zptcsoft.github.io&type=star&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20" style="width:110px;height:20px;  background-color: transparent;"></iframe><iframe src="///ghbtns.com/github-btn.html?user=zptcsoft&repo=zptcsoft.github.io&type=fork&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20" style="width:110px;height:20px;  background-color: transparent;"></iframe><iframe src="///ghbtns.com/github-btn.html?user=zptcsoft&repo=zptcsoft.github.io&type=follow&count=false" allowtransparency="true" frameborder="0" scrolling="0" width="170" height="20" style="width:170px;height:20px;  background-color: transparent;"></iframe></small></p>

</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'rollIn',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
<script src="./js/demo.js"></script>
<link rel="stylesheet" href="./style/01.css">
<script src="./js/zoom.js"></script>

<!--placeholder-->
</body>
</html>
